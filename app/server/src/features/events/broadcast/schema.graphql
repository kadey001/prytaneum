type EventBroadcastMessage implements Node {
    id: ID!
    createdAt: Date

    """
    User information on the person asking the broadcast message
    """
    createdBy: User

    """
    The user id of the creator
    """
    createdById: ID
    event: Event

    """
    If the broadcast message is owned by the current viewer
    """
    isVisible: Boolean
    lang: String

    """
    The users who have liked this broadcast message
    """
    likedBy: UserConnection

    position: Int

    """
    The actual content of the broadcast message
    """
    broadcastMessage: String!
    translatedBroadcastMessage(lang: String!): String
}

type EventBroadcastMessageEdge {
    node: EventBroadcastMessage!
    cursor: String!
}

type EventBroadcastMessageEdgeContainer {
    edge: EventBroadcastMessageEdge!
}

type EventBroadcastMessagesConnection {
    edges: [EventBroadcastMessageEdge!]
    pageInfo: PageInfo!
}

type EventBroadcastMessageMutationResponse implements MutationResponse {
    body: EventBroadcastMessageEdge
    isError: Boolean!
    message: String!
}

input DeleteBroadcastMessage {
    broadcastMessageId: ID!
    toggleBroadcastMessageVisibility: Boolean!
}

input EditBroadcastMessage {
    broadcastMessageId: ID!
    broadcastMessage: String!
}

input CreateBroadcastMessage {
    eventId: ID!
    broadcastMessage: String!
}

type Query {
    eventBroadcastMessages(eventId: ID!): [EventBroadcastMessage!]
}

type Mutation {
    createBroadcastMessage(input: CreateBroadcastMessage!): EventBroadcastMessageMutationResponse!
    deleteBroadcastMessage(input: DeleteBroadcastMessage!): EventBroadcastMessageMutationResponse!
    editBroadcastMessage(input: EditBroadcastMessage!): EventBroadcastMessageMutationResponse!
}

type Subscription {
    broadcastMessageCreated(eventId: ID!): EventBroadcastMessageEdgeContainer!
    broadcastMessageDeleted(eventId: ID!): EventBroadcastMessageEdgeContainer!
}
