input HideQuestion {
    questionId: ID!
    eventId: ID!

    """
    Goal state. If we want to change the state to hidden, toggleTo is true; false otherwise.
    """
    toggleTo: Boolean!
}

input UpdateQuestionPosition {
    questionId: ID!
    position: String!
    eventId: ID!
}

input CreateModerator {
    email: String!
    eventId: ID!
}

input DeleteModerator {
    userId: ID!
    eventId: ID!
}

input UpdateModerator {
    email: String!
    eventId: ID!
}

input AddQuestionToQueue {
    questionId: ID!
    eventId: ID!
}

input RemoveQuestionFromQueue {
    questionId: ID!
    eventId: ID!
}

input UpdateQuestionQueue {
    questionId: ID!
    eventId: ID!
    adding: Boolean!
}

input AddQuestionToTopicQueue {
    questionId: ID!
    eventId: ID!
    topic: String!
}

input RemoveQuestionFromTopicQueue {
    questionId: ID!
    eventId: ID!
    topic: String!
}

input AddQuestionToOnDeck {
    questionId: ID!
    eventId: ID!
    newPosition: String!
}

input RemoveQuestionFromOnDeck {
    questionId: ID!
    eventId: ID!
    """
    Can use the topic and new position to properly place the question in the correct order in the correct topic queue
    """
    topic: String!
    newPosition: String!
}

input UpdateOnDeckPosition {
    questionId: ID!
    eventId: ID!
    newPosition: String!
}

input UpdateTopicQueuePosition {
    questionId: ID!
    eventId: ID!
    topic: String!
    newPosition: String!
}

type ModeratorMutationResponse implements MutationResponse {
    isError: Boolean!
    message: String!
    body: User
}

type Mutation {
    hideQuestion(input: HideQuestion!): EventQuestion
    updateQuestionPosition(input: UpdateQuestionPosition!): EventQuestionMutationResponse!
    addQuestionToQueue(input: AddQuestionToQueue!): EventQuestionMutationResponse!
    removeQuestionFromQueue(input: RemoveQuestionFromQueue!): EventQuestionMutationResponse!
    addQuestionToTopicQueue(input: AddQuestionToTopicQueue!): EventQuestionMutationResponse!
    removeQuestionFromTopicQueue(input: RemoveQuestionFromTopicQueue!): EventQuestionMutationResponse!
    addQuestionToOnDeck(input: AddQuestionToOnDeck!): EventQuestionMutationResponse!
    removeQuestionFromOnDeck(input: RemoveQuestionFromOnDeck!): EventQuestionMutationResponse!
    updateOnDeckPosition(input: UpdateOnDeckPosition!): EventQuestionMutationResponse!
    updateTopicQueuePosition(input: UpdateQuestionPosition!): EventQuestionMutationResponse!

    """
    Add a new moderator to the given event
    """
    createModerator(input: CreateModerator!): ModeratorMutationResponse!

    updateModerator(input: UpdateModerator!): ModeratorMutationResponse!

    """
    Removes a moderator from a given event
    """
    deleteModerator(input: DeleteModerator!): ModeratorMutationResponse!

    """
    Advance the current question
    TODO: make this an EventMutationResponse
    """
    nextQuestion(eventId: ID!): Event!

    """
    Go to the previous question
    TODO: make this an EventMutationResponse
    """
    prevQuestion(eventId: ID!): Event!
}

type Subscription {
    """
    New messages as feedback is given
    """
    eventLiveFeedbackCreated(eventId: ID!): EventLiveFeedback!
}
