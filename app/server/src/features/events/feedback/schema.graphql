type EventLiveFeedback implements Node {
    id: ID!
    message: String!
    event: Event
    createdAt: Date
    createdBy: User
    createdById: ID
    isDM: Boolean
    dmRecipientId: ID
    isReply: Boolean
    refFeedback: EventLiveFeedback
}

type EventLiveFeedbackPrompt implements Node {
    id: ID!
    prompt: String!
    event: Event
    createdAt: Date
    isVote: Boolean
    isOpenEnded: Boolean
    isMultipleChoice: Boolean
    multipleChoiceOptions: [String!]
    isDraft: Boolean
    reasoningType: String
    responses(first: Int, after: String): EventLiveFeedbackPromptResponseConnection
    viewpoints: [String!]
    voteViewpoints: JSON # { string: [string!] } - vote: [viewpoints] - multipleChoice: [viewpoints]
    stakeholders: [String!]
}

enum Vote {
    FOR
    AGAINST
    CONFLICTED
}

type EventLiveFeedbackPromptResponse implements Node {
    id: ID!
    isOpenEnded: Boolean
    response: String
    isVote: Boolean
    vote: String
    isMultipleChoice: Boolean
    multipleChoiceResponse: String
    event: Event
    createdAt: Date
    createdBy: User
    createdById: ID
    promptId: ID
    prompt: EventLiveFeedbackPrompt
}

type EventLiveFeedbackEdge {
    node: EventLiveFeedback!
    cursor: String!
}

type EventLiveFeedbackPromptEdge {
    node: EventLiveFeedbackPrompt!
    cursor: String!
}

type EventLiveFeedbackPromptConnection {
    edges: [EventLiveFeedbackPromptEdge!]
    pageInfo: PageInfo!
}

type EventLiveFeedbackPromptResponseEdge {
    node: EventLiveFeedbackPromptResponse!
    cursor: String!
}

type EventLiveFeedbackPromptResponseConnection {
    edges: [EventLiveFeedbackPromptResponseEdge!]
    pageInfo: PageInfo!
}

type EventLiveFeedbackConnection {
    edges: [EventLiveFeedbackEdge!]
    pageInfo: PageInfo!
}

type FeedbackOperation {
    operationType: Operation!
    edge: EventLiveFeedbackEdge!
}

type EventFeedbackMutationResponse implements MutationResponse {
    isError: Boolean!
    message: String!
    body: EventLiveFeedbackEdge
}

type EventFeedbackPromptMutationResponse implements MutationResponse {
    isError: Boolean!
    message: String!
    body: EventLiveFeedbackPromptEdge
}

type EventFeedbackPromptResponseMutationResponse implements MutationResponse {
    isError: Boolean!
    message: String!
    body: EventLiveFeedbackPromptResponseEdge
}

type PostEventFeedbackMutationResponse implements MutationResponse {
    isError: Boolean!
    message: String!
}

input CreateFeedback {
    message: String!
    eventId: ID!
    refFeedbackId: ID
    isReply: Boolean
}

input CreateFeedbackDM {
    message: String!
    eventId: ID!
    recipientId: ID!
}

input CreateFeedbackPrompt {
    prompt: String!
    eventId: ID!
    feedbackType: String!
    choices: [String!]!
    isDraft: Boolean!
    reasoningType: String!
}

input CreateFeedbackPromptResponse {
    eventId: ID!
    promptId: ID!
    response: String!
    vote: String!
    multipleChoiceResponse: String!
}

type Votes {
    for: Int!
    against: Int!
    conflicted: Int!
}

input GenerateViewpointsInput {
    eventId: ID!
    promptId: ID!
    isForcedRegenerate: Boolean
}

type Mutation {
    createFeedback(input: CreateFeedback!): EventFeedbackMutationResponse!
    createFeedbackDM(input: CreateFeedbackDM!): EventFeedbackMutationResponse!
    createFeedbackPrompt(input: CreateFeedbackPrompt!): EventFeedbackPromptMutationResponse!
    shareFeedbackPromptDraft(promptId: ID!): EventFeedbackPromptMutationResponse!
    reshareFeedbackPrompt(promptId: ID!): EventFeedbackPromptMutationResponse!
    createFeedbackPromptResponse(input: CreateFeedbackPromptResponse!): EventFeedbackPromptResponseMutationResponse!
    shareFeedbackPromptResults(eventId: ID!, promptId: ID!): EventFeedbackPromptMutationResponse!
    submitPostEventFeedback(feedback: String!, eventId: ID!): PostEventFeedbackMutationResponse!
    generateViewpoints(input: GenerateViewpointsInput!): EventFeedbackPromptMutationResponse!
}

type Query {
    myFeedback(eventId: ID!): [EventLiveFeedback]
    promptResponses(promptId: ID!): [EventLiveFeedbackPromptResponse!]
    prompt(promptId: ID!): EventLiveFeedbackPrompt
    prompts(eventId: ID!): [EventLiveFeedbackPrompt!]
    promptResponseVotes(promptId: ID!): Votes!
    promptResponseViewpoints(promptId: ID!): [String!]
}

type Subscription {
    feedbackCRUD(eventId: ID!): FeedbackOperation!
    feedbackPrompted(eventId: ID!): EventLiveFeedbackPromptEdge!
    feedbackPromptResultsShared(eventId: ID!): EventLiveFeedbackPrompt!
}
